/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.debt;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.MouseInputAdapter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import Utils.Utils;
import java.awt.Point;

/**
 *
 * @author sidac
 */

import model.objects.DebtDB;
import model.objects.LogsDB;
public class debtView extends javax.swing.JFrame {
    private int flagIndex = -1;
    
    /**
     * Creates new form debtView
     */
    public debtView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        totalDebt = new javax.swing.JLabel();
        debtWrapTable = new javax.swing.JScrollPane();
        debtTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        changeSourceItemBtn = new javax.swing.JButton();
        itemToDebt = new javax.swing.JLabel();
        addDebtPanel = new JPanel();
        debtDetailLabel = new JLabel();
        detailOfDebtLabel = new JLabel();
        totalDebtValueLabel = new JLabel();
        ownerLabel = new JLabel();
        totalDebtValue = new JTextField();
        ownerValue = new JTextField();
        addDebtBtn = new JButton();
        paymentDeadlineLabel = new JLabel();
        paymentDeadlineValue = new JTextField();
        paymentTypeLabel = new JLabel();
        paymentTypeValue = new JComboBox<>();
        payDateLabel = new JLabel();
        payDateValue = new JTextField();
        anylize = new JLabel();
        jTextField1 = new JTextField();
        detailDebtValue = new JTextField();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        totalDebt.setText("Tổng nợ");
        jPanel1.add(totalDebt);
        totalDebt.setBounds(354, 10, 70, 14);

        debtTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
            },
            new String [] {
                "ID", "Nội dung", "Phải trả", "Ngày trả kế", "Còn lại", "Hạn chót", "Chủ nợ", "Trả "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        debtTable.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        debtTable.setShowGrid(false);
        debtTable.setIntercellSpacing(new Dimension(0, 0));
        debtTable.addMouseListener(new MouseInputAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Lấy vị trí click chuột
                Point point = e.getPoint();

                // Lấy số dòng và số cột từ vị trí click chuột
                int row = debtTable.rowAtPoint(point);
                int column = debtTable.columnAtPoint(point);
                if (column == 7){
                    int value = 0;
                    boolean display = false;
                    //Lấy index trong data
                    int idTemp = (int)debtTable.getValueAt(row, 0);
                    row = getIndexInData(dataDebt, idTemp);
                    if (dataDebt[row][7] == "onetime"){
                        if ((int)dataDebt[row][2] - (int)dataDebt[row][4] > 0){
                            value = (int)dataDebt[row][2] - (int)dataDebt[row][4];
                            display = true;
                        }
                    }
                    else if (dataDebt[row][7] == "monthly"){
                        if ((int)dataDebt[row][2] - (int)dataDebt[row][4] > 0){
                            value = (int)dataDebt[row][2] - (int)dataDebt[row][4];
                            display = true;
                        }
                    }
                    // JOptionPane.showMessageDialog(debtTable, "Hello, this is a dialog!");
                    // Nếu bạn muốn hiển thị dialog với nút Yes/No
                    // if (display){
                        int result = JOptionPane.showConfirmDialog(debtTable, "Số tiền cần trả là: " + value, "Confirmation", JOptionPane.YES_NO_OPTION);
                        if (result == JOptionPane.YES_OPTION) {
                            // Thực hiện hành động khi người dùng chọn Yes
                            debtDB.updateData(idTemp, value);
                            // String sql = "INSERT INTO Log (category_id, amount, note, date) VALUES (?, ?, ?, ?)";

                            new LogsDB().insertData(new Object[]{dataDebt[getIndexInData(dataDebt, idTemp)][getIndexInColVector(columnNames, "destination")],
                                                                value, "Trả nợ #"+idTemp, Utils.getCurrentDateFormatted()});
                        } else {
                            // Thực hiện hành động khi người dùng chọn No
                        }
                    // }

                    // fillDebtTable();
                }
                super.mouseClicked(e);
                // In ra console số dòng và số cột của ô được click
            }
        });
        // Thiết lập hiệu ứng đổi màu khi di chuột qua
        debtTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent evt) {
                debtTable.clearSelection();
            }
        });

        debtTable.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent evt) {
                int row = debtTable.rowAtPoint(evt.getPoint());
                debtTable.clearSelection();
                if (row >= 0 && row < debtTable.getRowCount()) {
                    debtTable.addRowSelectionInterval(row, row);
               }
                
            }
        });
        debtTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
             @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component rendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
                if (row == table.getEditingRow() && column == table.getEditingColumn()) {
                    // Nếu ô đang được chỉnh sửa, không thực hiện hiệu ứng
                    return rendererComponent;
                }
        
                // Chọn màu xen kẽ cho các dòng
                if (row % 2 == 0) {
                    rendererComponent.setBackground(new Color(240, 240, 240));
                } else {
                    rendererComponent.setBackground(Color.WHITE);
                }
        
                // Kiểm tra nếu hàng này đang được di chuột qua
                // if (isSelected) {
                    // Thực hiện hiệu ứng màu đè lên
                rendererComponent.setBackground(new Color(255, 255, 255, 100)); // Màu trắng với độ trong suốt
                // }
        
                return rendererComponent;
            }
        });
//         JTableHeader tableHeader = debtTable.getTableHeader();

//         // Lấy TableColumnModel từ JTableHeader
//         TableColumnModel columnModel = tableHeader.getColumnModel();

//         // Lấy số lượng cột
//         int columnCount = columnModel.getColumnCount();

//         // Lấy từng TableColumn cụ thể
//         for (int i = 0; i < columnCount; i++) {
//             TableColumn column = columnModel.getColumn(i);
// //            tableHeader.getColumnModel().getColumn(i).addMouseListener()

//         }
//         JTableHeader tableHeader1 = debtTable.getTableHeader();
//         tableHeader1.addMouseMotionListener(new MouseAdapter() {
//             @Override
//             public void mouseMoved(MouseEvent e) {
//                 int column = tableHeader1.columnAtPoint(e.getPoint());
//                 if (column != -1 && column != flagIndex) {
//                     tableHeader1.getColumnModel().getColumn(column).setHeaderRenderer(new CustomHeaderRenderer());
//                     if (flagIndex != -1){
//                         tableHeader1.getColumnModel().getColumn(flagIndex).setHeaderRenderer(new CustomHeaderRendererBack());
//                     }
//                     tableHeader1.repaint();
//                     flagIndex = column;
//                 }
//             }
            
//             @Override
//             public void mouseExited(MouseEvent e) {
//                 int column = tableHeader1.columnAtPoint(e.getPoint());
//                 System.out.println("a" + column);
//                 for (int i =0 ; i< columnCount; i++){
//                     tableHeader1.getColumnModel().getColumn(column).setHeaderRenderer(new CustomHeaderRendererBack());
// //                    tableHeader.repaint()
//                 }
//                 tableHeader1.repaint();
//             }
//         });

//         // Thêm sự kiện chuột để lấy cell header hiện tại
//         tableHeader1.addMouseListener(new MouseAdapter() {
//             @Override
//             public void mouseEntered(MouseEvent e) {
//                 int column = tableHeader1.columnAtPoint(e.getPoint());
//                 if (column != -1) {
                    
//                     String columnName = debtTable.getColumnName(column);
//                     tableHeader.getColumnModel().getColumn(column).setHeaderRenderer(new CustomHeaderRenderer());
//                     tableHeader.repaint();
                    
//                 }
//             }
            
//             @Override
//             public void mouseExited(MouseEvent e) {
//                 int column = tableHeader1.columnAtPoint(e.getPoint());
//                 if (column != -1) {
//                     String columnName = debtTable.getColumnName(column);
//                     tableHeader.getColumnModel().getColumn(column).setHeaderRenderer(new CustomHeaderRendererBack());
//                     tableHeader.repaint();
//                 }
//             }
            
//         });
        
        debtTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component rendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (!isSelected) {
                    // Chọn màu xen kẽ cho các dòng
                    if (row % 2 == 0) {
                        rendererComponent.setBackground(new Color(240, 240, 240));
                    } else {
                        rendererComponent.setBackground(Color.WHITE);
                    }
                }

                return rendererComponent;
            }
        });

        debtWrapTable.setViewportView(debtTable);
        if (debtTable.getColumnModel().getColumnCount() > 0) {
            debtTable.getColumnModel().getColumn(6).setResizable(false);
        }
        // debtWrapTable.add(showAddDebtPanel());
        jPanel1.add(debtWrapTable);
        debtWrapTable.setBounds(10, 70, 510, 170);

        addBtn.setText("Thêm");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDebtInfoBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addBtn);
        addBtn.setBounds(10, 20, 59, 23);

        changeSourceItemBtn.setText("1");
        changeSourceItemBtn.setToolTipText("Mục nguồn");
        changeSourceItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // changeSourceItemBtnActionPerformed(evt);
            }
        });

        jPanel1.add(changeSourceItemBtn);
        changeSourceItemBtn.setBounds(110, 20, 73, 23);

        itemToDebt.setText("jLabel1");
        itemToDebt.setToolTipText("Mục nguồn");
        itemToDebt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemToDebtMouseClicked(evt);
            }
        });
        jPanel1.add(itemToDebt);
        itemToDebt.setBounds(230, 20, 40, 20);
        this.fillDebtTable();
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 10, 540, 380);
        setSize(600, 450);
        pack();
    }// </editor-fold>                        

    private void itemToDebtMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
    }                                       
    private class CustomHeaderRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component headerComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            headerComponent.setBackground(Color.YELLOW);
            return headerComponent;
        }
    }
    
    private class CustomHeaderRendererBack extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component headerComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            Color defaultHeaderColor = UIManager.getColor("TableHeader.background");

            headerComponent.setBackground(defaultHeaderColor);
            return headerComponent;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.formdev.flatlaf.FlatDarkLaf");
        }
        catch (Exception ex){
            ;
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new debtView().setVisible(true);
            }
        });
    }
    // private class DateCellRenderer extends DefaultTableCellRenderer {
    //     @Override
    //     public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
    //                                                    boolean hasFocus, int row, int column) {
    //         Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

    //         // Kiểm tra điều kiện (ví dụ: nếu giá trị Age lớn hơn 30)
    //         String date = (String) value;
    //         if (Utils.calDateDiffBetweenToDate(date, Utils.getCurrentDateFormatted(), "dd/MM/yyyy") <= 3) {
    //             c.setForeground(Color.RED);
    //         } else {
    //             c.setForeground(table.getForeground());
    //         }

    //         return c;
    //     }
    // }
    private void showAddDebtPanel(){
        JFrame addDebtFrame = new JFrame();
        addDebtFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        addDebtFrame.setLayout(null);
        addDebtFrame.setSize(400, 300);
        addDebtFrame.isAlwaysOnTop();

        addDebtPanel.setBackground(new java.awt.Color(255, 255, 255));
        addDebtPanel.setLayout(null);

        debtDetailLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        debtDetailLabel.setText("Thông tin nợ");
        addDebtPanel.add(debtDetailLabel);
        debtDetailLabel.setBounds(110, 10, 80, 17);

        detailOfDebtLabel.setText("Chi tiết");
        addDebtPanel.add(detailOfDebtLabel);
        detailOfDebtLabel.setBounds(20, 40, 50, 14);

        totalDebtValueLabel.setText("Tổng nợ:");
        addDebtPanel.add(totalDebtValueLabel);
        totalDebtValueLabel.setBounds(20, 130, 50, 14);

        ownerLabel.setText("Chủ nợ:");
        addDebtPanel.add(ownerLabel);
        ownerLabel.setBounds(20, 170, 40, 14);

        addDebtBtn.setText("Thêm");
        addDebtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDebtBtnActionPerformed(evt);
            }
        });
        addDebtPanel.add(addDebtBtn);
        addDebtBtn.setBounds(120, 210, 59, 23);

        paymentDeadlineLabel.setText("Hạn cuối: ");
        addDebtPanel.add(paymentDeadlineLabel);
        paymentDeadlineLabel.setBounds(160, 40, 50, 14);

        paymentTypeLabel.setText("Trả theo: ");
        addDebtPanel.add(paymentTypeLabel);
        paymentTypeLabel.setBounds(160, 80, 50, 14);

        paymentTypeValue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tháng", "Toàn bộ" }));
        addDebtPanel.add(paymentTypeValue);
        paymentTypeValue.setBounds(230, 80, 65, 20);

        payDateLabel.setText("Ngày trả: ");
        addDebtPanel.add(payDateLabel);
        payDateLabel.setBounds(160, 120, 49, 14);

        anylize.setText("(Dự đoán: cần x tháng)");
        addDebtPanel.add(anylize);
        anylize.setBounds(160, 160, 120, 14);

        detailDebtValue.setText("jTextField1");
        detailDebtValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // detailDebtValueActionPerformed(evt);
            }
        });
        addDebtPanel.add(detailDebtValue);
        detailDebtValue.setBounds(20, 60, 100, 40);

        totalDebtValue.setText("jTextField1");
        addDebtPanel.add(totalDebtValue);
        totalDebtValue.setBounds(80, 130, 60, 20);

        ownerValue.setText("jTextField2");
        addDebtPanel.add(ownerValue);
        ownerValue.setBounds(80, 170, 60, 20);

        payDateValue.setText("jTextField3");
        addDebtPanel.add(payDateValue);
        payDateValue.setBounds(230, 120, 60, 20);

        paymentDeadlineValue.setText("jTextField1");
        paymentDeadlineValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // paymentDeadlineValueActionPerformed(evt);
            }
        });
        addDebtPanel.add(paymentDeadlineValue);
        paymentDeadlineValue.setBounds(230, 40, 60, 20);
        // JPanel a = new JPanel();
        // a.setBackground(Color.red);
        // a.setBounds(20, 40, 100, 40);
        addDebtPanel.setBounds(0, 0, 400, 300);
        addDebtFrame.add(addDebtPanel);
        addDebtFrame.setLocationRelativeTo(null);
        addDebtFrame.setSize(400,300);
        addDebtFrame.setType(JFrame.Type.UTILITY);
        addDebtFrame.validate();
        addDebtFrame.repaint();
        addDebtFrame.setVisible(true);
        // return addDebtPanel;
    }

    private void addDebtBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        debtDB.insertData(1, ownerValue.getText(), Integer.parseInt(totalDebtValue.getText()) , jTextField1.getText(), payDateValue.getText(), paymentDeadlineValue.getText(), paymentTypeValue.getSelectedItem().toString(), totalDebtValue.getText(), "0", 1);
    }

    private void addDebtInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        System.out.println("a");
        showAddDebtPanel();
        System.out.println(ownerValue.getText());
    }

    private void fillDebtTable(){
        Object[][] data = debtDB.getData(0,1, columnNames.toArray(new String[columnNames.size()]));
        dataDebt = data;
        // Vector<Object> row = new Vector<Object>(Arrays.asList("1", "Nội dung", "Phải trả", "Ngày trả kế", "Còn lại", "Hạn chót", "Chủ nợ", "Trả "));
        // Vector<Vector<Object>> dataV = new Vector<Vector<Object>>();
        DefaultTableModel model = (DefaultTableModel) debtTable.getModel();
        
        model.setRowCount(0);
        for (int i = 0; i < data.length; i++) {
            model.addRow(data[i]);
        }
        // DefaultTableModel model = new DefaultTableModel(data, columnNames);
        debtTable.setModel(model);
    }
    private int getIndexInColVector(Vector<String> col, String value){
        for (int i = 0; i < col.size(); i++){
            if (col.get(i) == value){
                return i;
            }
        }
        return -1;
    }
    public int getIndexInData(Object[][] dataDebt, int id){
        for (int i = 0; i < dataDebt.length; i++){
            if ((int)dataDebt[i][0] == id){
                return i;
            }
        }
        return -1;
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton addBtn;
    private javax.swing.JTable debtTable;
    private Object[][] dataDebt;
    private javax.swing.JScrollPane debtWrapTable;
    private javax.swing.JLabel itemToDebt;
    private javax.swing.JButton changeSourceItemBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel totalDebt;
    private javax.swing.JPanel addDebtPanel;
    private javax.swing.JTextField totalDebtValue;
    private javax.swing.JLabel ownerLabel;
    private javax.swing.JTextField ownerValue;
    private javax.swing.JLabel debtDetailLabel;
    private javax.swing.JLabel detailOfDebtLabel;
    private javax.swing.JButton addDebtBtn;
    private javax.swing.JLabel totalDebtValueLabel;
    private javax.swing.JLabel paymentDeadlineLabel;
    private javax.swing.JTextField paymentDeadlineValue;
    private javax.swing.JLabel paymentTypeLabel;
    private javax.swing.JComboBox<String> paymentTypeValue;
    private javax.swing.JLabel payDateLabel;
    private javax.swing.JTextField payDateValue;
    private javax.swing.JLabel anylize;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField detailDebtValue;
    private DebtDB debtDB = new DebtDB();
    private int idSource = 0;
    private Vector<String> columnNames = new Vector<String>(Arrays.asList("ID", "description", "totalAmount", "nextPayDate", "paidAmount", "paymentDeadline", "debtor", "paymentType", "destination"));
    // End of variables declaration                   
}
